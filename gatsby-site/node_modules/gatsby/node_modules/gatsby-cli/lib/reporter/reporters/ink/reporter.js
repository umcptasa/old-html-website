"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _ink = require("ink");

var _chalk = _interopRequireDefault(require("chalk"));

var _gatsbyTelemetry = require("gatsby-telemetry");

var _spinner = _interopRequireDefault(require("./components/spinner"));

var _progressBar = _interopRequireDefault(require("./components/progress-bar"));

var _develop = _interopRequireDefault(require("./components/develop"));

var _messages = require("./components/messages");

var _error = _interopRequireDefault(require("./components/error"));

var _isTty = _interopRequireDefault(require("../../../util/is-tty"));

var _calcElapsedTime = _interopRequireDefault(require("../../../util/calc-elapsed-time"));

const showProgress = _isTty.default;
const successTextGenerator = {
  spinner: activity => {
    let successText = `${activity.id} - ${(0, _calcElapsedTime.default)(activity.startTime)} s`;

    if (activity.status) {
      successText += ` — ${activity.status}`;
    }

    return successText;
  },
  progress: activity => `${activity.id} — ${activity.current}/${activity.total} - ${(0, _calcElapsedTime.default)(activity.startTime)} s`
};

class GatsbyReporter extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "verbose", process.env.gatsby_log_level === `verbose`);
    (0, _defineProperty2.default)(this, "state", {
      verbose: false,
      messages: [],
      activities: {},
      stage: {
        stage: `init`,
        context: {}
      }
    });
    (0, _defineProperty2.default)(this, "format", _chalk.default);
    (0, _defineProperty2.default)(this, "setStage", stage => {
      this.setState({
        stage
      });
    });
    (0, _defineProperty2.default)(this, "createActivity", (_ref) => {
      let id = _ref.id,
          options = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["id"]);
      this.setState(state => {
        return {
          activities: Object.assign({}, state.activities, {
            [id]: Object.assign({
              id
            }, options)
          })
        };
      });
      return {
        update: newState => {
          this.setState(state => {
            return {
              activities: Object.assign({}, state.activities, {
                [id]: Object.assign({}, state.activities[id], {}, newState)
              })
            };
          });
        },
        done: () => {
          const activity = this.state.activities[id];
          this.success(successTextGenerator[activity.type](Object.assign({
            id
          }, activity)));
          this.setState(state => {
            const activities = Object.assign({}, state.activities);
            delete activities[id];
            return {
              activities
            };
          });
        }
      };
    });
    (0, _defineProperty2.default)(this, "log", this._addMessage.bind(this, null));
    (0, _defineProperty2.default)(this, "info", this._addMessage.bind(this, `info`));
    (0, _defineProperty2.default)(this, "success", this._addMessage.bind(this, `success`));
    (0, _defineProperty2.default)(this, "warn", this._addMessage.bind(this, `warn`));
    (0, _defineProperty2.default)(this, "error", this._addMessage.bind(this, `error`));
    (0, _defineProperty2.default)(this, "verbose", str => {
      if (!this.verbose) {
        return;
      }

      this._addMessage(`verbose`, str);
    });
  }

  setColors(useColors = false) {
    this.setState({
      disableColors: !useColors
    });
  }

  setVerbose(isVerbose = true) {
    this.verbose = isVerbose;
  }

  _addMessage(type, details) {
    // threat null/undefind as an empty character, it seems like ink can't handle empty str
    if (!details) {
      details = `\u2800`;
    }

    const msg = {
      type,
      details
    };
    this.setState(state => {
      return {
        messages: [...state.messages, msg]
      };
    });
  }

  static getDerivedStateFromError(error) {
    return {
      hasError: true,
      error: error.name
    };
  }

  componentDidCatch(error, info) {
    (0, _gatsbyTelemetry.trackBuildError)(`INK`, {
      error: {
        message: error.name,
        stack: info.componentStack
      }
    });
  }

  render() {
    const _this$state = this.state,
          activities = _this$state.activities,
          messages = _this$state.messages,
          disableColors = _this$state.disableColors,
          stage = _this$state.stage,
          hasError = _this$state.hasError,
          error = _this$state.error;

    if (hasError) {
      // You can render any custom fallback UI
      return _react.default.createElement(_ink.Box, {
        flexDirection: "row"
      }, _react.default.createElement(_messages.Message, {
        type: "error",
        hideColors: disableColors
      }, "We've encountered an error: ", error));
    }

    const spinners = [];
    const progressBars = [];

    if (showProgress) {
      Object.keys(activities).forEach(activityName => {
        const activity = activities[activityName];

        if (activity.type === `spinner`) {
          spinners.push(activity);
        }

        if (activity.type === `progress` && activity.startTime) {
          progressBars.push(activity);
        }
      });
    }

    return _react.default.createElement(_ink.Box, {
      flexDirection: "column"
    }, _react.default.createElement(_ink.Box, {
      flexDirection: "column"
    }, _react.default.createElement(_ink.Static, null, messages.map((msg, index) => msg.type === `error` ? _react.default.createElement(_error.default, {
      type: msg.type,
      details: msg.details,
      key: index
    }) : _react.default.createElement(_messages.Message, {
      type: msg.type,
      hideColors: disableColors,
      key: index
    }, _react.default.createElement(_ink.Text, null, msg.details)))), spinners.map(activity => _react.default.createElement(_spinner.default, (0, _extends2.default)({
      key: activity.id,
      name: activity.id
    }, activity))), progressBars.map(activity => _react.default.createElement(_progressBar.default, {
      key: activity.id,
      message: activity.id,
      total: activity.total,
      current: activity.current,
      startTime: activity.startTime
    }))), stage.stage === `DevelopBootstrapFinished` && _react.default.createElement(_develop.default, {
      stage: stage
    }));
  }

}

exports.default = GatsbyReporter;