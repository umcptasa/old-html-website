"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Message = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireDefault(require("react"));

var _ink = require("ink");

var _stripAnsi = _interopRequireDefault(require("strip-ansi"));

const ColorSwitcher = (_ref) => {
  let hideColors = _ref.hideColors,
      children = _ref.children,
      props = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["hideColors", "children"]);

  if (hideColors) {
    return (0, _stripAnsi.default)(children);
  }

  return _react.default.createElement(_ink.Color, props, children);
};

const createLabel = (text, color) => (...props) => _react.default.createElement(ColorSwitcher, Object.assign({
  [color]: true
}, props), text);

const getLabel = type => {
  switch (type) {
    case `success`:
      return createLabel(`success`, `green`);

    case `error`:
      return createLabel(`error`, `red`);

    case `warn`:
      return createLabel(`warn`, `yellow`);

    case `verbose`:
      return createLabel(`verbose`, `gray`);

    case `info`:
      return createLabel(`info`, `blue`);

    default:
      return createLabel(`debug ${type}`, `blue`);
  }
};

const Message = ({
  type,
  hideColors,
  children
}) => {
  if (!type) {
    return _react.default.createElement(_react.default.Fragment, null, children);
  }

  const TextLabel = getLabel(type);
  return _react.default.createElement(_ink.Box, {
    textWrap: "wrap",
    flexDirection: "row"
  }, _react.default.createElement(TextLabel, {
    hideColors: hideColors
  }), ` `, children);
};

exports.Message = Message;