"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _ink = require("ink");

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

// Query the site's graphql instance for the latest count.
const fetchPageQueryCount = url => (0, _nodeFetch.default)(`${url}___graphql`, {
  method: `post`,
  body: JSON.stringify({
    query: `query MyQuery {
  allSitePage {
    totalCount
  }
}`
  }),
  headers: {
    "Content-Type": `application/json`
  }
}).then(res => res.json()).then(json => json.data.allSitePage.totalCount);

class Develop extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      pagesCount: 0,
      sizes: [this.props.stdout.columns, this.props.stdout.rows]
    });
    (0, _defineProperty2.default)(this, "timer", null);
  }

  fetchPageCount() {
    fetchPageQueryCount(this.props.stage.context.url).then(pagesCount => this.setState({
      pagesCount
    }));
    this.timer = setTimeout(this.fetchPageCount.bind(this), 1000);
  }

  componentDidMount() {
    this.fetchPageCount();
    const stdout = this.props.stdout;
    stdout.on(`resize`, () => {
      this.setState({
        sizes: [stdout.columns, stdout.rows]
      });
    });
  }

  componentWillUpdate(nextProps) {
    if (this.props.stdout !== nextProps.stdout) {
      this.props.stdout.off(`resize`);
      const stdout = nextProps.stdout;
      stdout.on(`resize`, () => {
        this.setState({
          sizes: [stdout.columns, stdout.rows]
        });
      });
    }
  }

  componentWillUnmount() {
    this.props.stdout.off(`resize`);

    if (this.timer) {
      clearTimeout(this.timer);
    }
  }

  render() {
    return _react.default.createElement(_ink.Box, {
      flexDirection: "column",
      marginTop: 2
    }, _react.default.createElement(_ink.Box, {
      textWrap: `truncate`
    }, `â€”`.repeat(this.state.sizes[0])), _react.default.createElement(_ink.Box, {
      height: 1,
      flexDirection: "row"
    }, _react.default.createElement(_ink.Color, null, this.state.pagesCount, " pages"), _react.default.createElement(_ink.Box, {
      flexGrow: 1
    }), _react.default.createElement(_ink.Color, null, this.props.stage.context.appName || ``)));
  }

}

var _default = props => _react.default.createElement(_ink.StdoutContext.Consumer, null, ({
  stdout
}) => _react.default.createElement(Develop, (0, _extends2.default)({
  stdout: stdout
}, props)));

exports.default = _default;