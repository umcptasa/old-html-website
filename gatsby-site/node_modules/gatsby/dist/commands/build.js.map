{"version":3,"sources":["../../src/commands/build.js"],"names":["_","require","path","report","buildHTML","buildProductionBundle","bootstrap","apiRunnerNode","copyStaticDirs","initTracer","stopTracer","db","tracer","globalTracer","signalExit","telemetry","store","emitter","queryUtil","pageDataUtil","WorkerPool","handleWebpackError","waitJobsFinished","Promise","resolve","reject","onEndJob","getState","jobs","active","length","off","on","module","exports","build","program","publicDir","join","directory","openTracingConfigFile","trackCli","exitCode","buildSpan","startSpan","setTag","graphqlRunner","parentSpan","queryIds","calcInitialDirtyQueryIds","staticQueryIds","pageQueryIds","groupQueryIds","activity","activityTimer","start","processStaticQueries","state","end","graphql","stats","span","catch","err","panic","workerPool","create","webpackCompilationHash","hash","dispatch","type","payload","cleanPagePaths","difference","pages","keys","updateCompilationHashes","processPageQueries","boundActionCreators","setProgramStatus","saveState","buildPages","stage","pagePaths","id","message","error","context","errorPath","info","process","uptime","finish"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst _ = require(`lodash`)\nconst path = require(`path`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst buildHTML = require(`./build-html`)\nconst buildProductionBundle = require(`./build-javascript`)\nconst bootstrap = require(`../bootstrap`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { copyStaticDirs } = require(`../utils/get-static-dir`)\nconst { initTracer, stopTracer } = require(`../utils/tracer`)\nconst db = require(`../db`)\nconst tracer = require(`opentracing`).globalTracer()\nconst signalExit = require(`signal-exit`)\nconst telemetry = require(`gatsby-telemetry`)\nconst { store, emitter } = require(`../redux`)\nconst queryUtil = require(`../query`)\nconst pageDataUtil = require(`../utils/page-data`)\nconst WorkerPool = require(`../utils/worker/pool`)\nconst handleWebpackError = require(`../utils/webpack-error-parser`)\n\ntype BuildArgs = {\n  directory: string,\n  sitePackageJson: object,\n  prefixPaths: boolean,\n  noUglify: boolean,\n  openTracingConfigFile: string,\n}\n\nconst waitJobsFinished = () =>\n  new Promise((resolve, reject) => {\n    const onEndJob = () => {\n      if (store.getState().jobs.active.length === 0) {\n        resolve()\n        emitter.off(`END_JOB`, onEndJob)\n      }\n    }\n    emitter.on(`END_JOB`, onEndJob)\n    onEndJob()\n  })\n\nmodule.exports = async function build(program: BuildArgs) {\n  const publicDir = path.join(program.directory, `public`)\n  initTracer(program.openTracingConfigFile)\n\n  telemetry.trackCli(`BUILD_START`)\n  signalExit(exitCode => {\n    telemetry.trackCli(`BUILD_END`, { exitCode })\n  })\n\n  const buildSpan = tracer.startSpan(`build`)\n  buildSpan.setTag(`directory`, program.directory)\n\n  const { graphqlRunner } = await bootstrap({\n    ...program,\n    parentSpan: buildSpan,\n  })\n\n  const queryIds = queryUtil.calcInitialDirtyQueryIds(store.getState())\n  const { staticQueryIds, pageQueryIds } = queryUtil.groupQueryIds(queryIds)\n\n  let activity = report.activityTimer(`run static queries`, {\n    parentSpan: buildSpan,\n  })\n  activity.start()\n  await queryUtil.processStaticQueries(staticQueryIds, {\n    activity,\n    state: store.getState(),\n  })\n  activity.end()\n\n  await apiRunnerNode(`onPreBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirs()\n\n  activity = report.activityTimer(\n    `Building production JavaScript and CSS bundles`,\n    { parentSpan: buildSpan }\n  )\n  activity.start()\n  const stats = await buildProductionBundle(program, {\n    parentSpan: activity.span,\n  }).catch(err => {\n    report.panic(handleWebpackError(`build-javascript`, err))\n  })\n  activity.end()\n\n  const workerPool = WorkerPool.create()\n\n  const webpackCompilationHash = stats.hash\n  if (webpackCompilationHash !== store.getState().webpackCompilationHash) {\n    store.dispatch({\n      type: `SET_WEBPACK_COMPILATION_HASH`,\n      payload: webpackCompilationHash,\n    })\n\n    activity = report.activityTimer(`Rewriting compilation hashes`, {\n      parentSpan: buildSpan,\n    })\n    activity.start()\n\n    // We need to update all page-data.json files with the new\n    // compilation hash. As a performance optimization however, we\n    // don't update the files for `pageQueryIds` (dirty queries),\n    // since they'll be written after query execution.\n    const cleanPagePaths = _.difference(\n      [...store.getState().pages.keys()],\n      pageQueryIds\n    )\n    await pageDataUtil.updateCompilationHashes(\n      { publicDir, workerPool },\n      cleanPagePaths,\n      webpackCompilationHash\n    )\n\n    activity.end()\n  }\n\n  activity = report.activityTimer(`run page queries`, {\n    parentSpan: buildSpan,\n  })\n  activity.start()\n  await queryUtil.processPageQueries(pageQueryIds, { activity })\n  activity.end()\n\n  require(`../redux/actions`).boundActionCreators.setProgramStatus(\n    `BOOTSTRAP_QUERY_RUNNING_FINISHED`\n  )\n\n  await waitJobsFinished()\n\n  await db.saveState()\n\n  activity = report.activityTimer(`Building static HTML for pages`, {\n    parentSpan: buildSpan,\n  })\n  activity.start()\n  try {\n    await buildHTML.buildPages({\n      program,\n      stage: `build-html`,\n      pagePaths: [...store.getState().pages.keys()],\n      activity,\n      workerPool,\n    })\n  } catch (err) {\n    let id = `95313` // TODO: verify error IDs exist\n    if (err.message === `ReferenceError: window is not defined`) {\n      id = `95312`\n    }\n\n    report.panic({\n      id,\n      error: err,\n      context: {\n        errorPath: err.context && err.context.path,\n      },\n    })\n  }\n  activity.end()\n\n  await apiRunnerNode(`onPostBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  report.info(`Done building in ${process.uptime()} sec`)\n\n  buildSpan.finish()\n  await stopTracer()\n  workerPool.end()\n}\n"],"file":"build.js"}