{"version":3,"sources":["../../src/db/sanitize-node.js"],"names":["_","require","sanitizeNode","data","isNode","isPlainObject","isArray","returnData","anyFieldChanged","each","o","key","omitUndefined","isTypeSupported","undefined","pickBy","p","filter","type","isSupported","Date","module","exports"],"mappings":";;AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;AAEA;;;;;;AAIA,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,MAAM,GAAG,IAAhB,KAAyB;AAC5C,QAAMC,aAAa,GAAGL,CAAC,CAACK,aAAF,CAAgBF,IAAhB,CAAtB;;AAEA,MAAIE,aAAa,IAAIL,CAAC,CAACM,OAAF,CAAUH,IAAV,CAArB,EAAsC;AACpC,UAAMI,UAAU,GAAGF,aAAa,GAAG,EAAH,GAAQ,EAAxC;AACA,QAAIG,eAAe,GAAG,KAAtB;;AACAR,IAAAA,CAAC,CAACS,IAAF,CAAON,IAAP,EAAa,CAACO,CAAD,EAAIC,GAAJ,KAAY;AACvB,UAAIP,MAAM,IAAIO,GAAG,KAAM,UAAvB,EAAkC;AAChCJ,QAAAA,UAAU,CAACI,GAAD,CAAV,GAAkBD,CAAlB;AACA;AACD;;AACDH,MAAAA,UAAU,CAACI,GAAD,CAAV,GAAkBT,YAAY,CAACQ,CAAD,EAAI,KAAJ,CAA9B;;AAEA,UAAIH,UAAU,CAACI,GAAD,CAAV,KAAoBD,CAAxB,EAA2B;AACzBF,QAAAA,eAAe,GAAG,IAAlB;AACD;AACF,KAVD;;AAYA,QAAIA,eAAJ,EAAqB;AACnBL,MAAAA,IAAI,GAAGS,aAAa,CAACL,UAAD,CAApB;AACD,KAjBmC,CAmBpC;;;AACA,WAAOJ,IAAP;AACD;;AAED,MAAI,CAACU,eAAe,CAACV,IAAD,CAApB,EAA4B;AAC1B,WAAOW,SAAP;AACD,GAFD,MAEO;AACL,WAAOX,IAAP;AACD;AACF,CA/BD;AAiCA;;;;;;AAIA,MAAMS,aAAa,GAAGT,IAAI,IAAI;AAC5B,QAAME,aAAa,GAAGL,CAAC,CAACK,aAAF,CAAgBF,IAAhB,CAAtB;;AACA,MAAIE,aAAJ,EAAmB;AACjB,WAAOL,CAAC,CAACe,MAAF,CAASZ,IAAT,EAAea,CAAC,IAAIA,CAAC,KAAKF,SAA1B,CAAP;AACD;;AAED,SAAOX,IAAI,CAACc,MAAL,CAAYD,CAAC,IAAIA,CAAC,KAAKF,SAAvB,CAAP;AACD,CAPD;AASA;;;;;;AAIA,MAAMD,eAAe,GAAGV,IAAI,IAAI;AAC9B,MAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAO,IAAP;AACD;;AAED,QAAMe,IAAI,GAAG,OAAOf,IAApB;AACA,QAAMgB,WAAW,GACfD,IAAI,KAAM,QAAV,IACAA,IAAI,KAAM,QADV,IAEAA,IAAI,KAAM,SAFV,IAGAf,IAAI,YAAYiB,IAJlB;AAMA,SAAOD,WAAP;AACD,CAbD;;AAeAE,MAAM,CAACC,OAAP,GAAiBpB,YAAjB","sourcesContent":["const _ = require(`lodash`)\n\n/**\n * Make data serializable\n * @param {(Object|Array)} data to sanitize\n */\nconst sanitizeNode = (data, isNode = true) => {\n  const isPlainObject = _.isPlainObject(data)\n\n  if (isPlainObject || _.isArray(data)) {\n    const returnData = isPlainObject ? {} : []\n    let anyFieldChanged = false\n    _.each(data, (o, key) => {\n      if (isNode && key === `internal`) {\n        returnData[key] = o\n        return\n      }\n      returnData[key] = sanitizeNode(o, false)\n\n      if (returnData[key] !== o) {\n        anyFieldChanged = true\n      }\n    })\n\n    if (anyFieldChanged) {\n      data = omitUndefined(returnData)\n    }\n\n    // arrays and plain objects are supported - no need to to sanitize\n    return data\n  }\n\n  if (!isTypeSupported(data)) {\n    return undefined\n  } else {\n    return data\n  }\n}\n\n/**\n * @param {Object|Array} data\n * @returns {Object|Array} data without undefined values\n */\nconst omitUndefined = data => {\n  const isPlainObject = _.isPlainObject(data)\n  if (isPlainObject) {\n    return _.pickBy(data, p => p !== undefined)\n  }\n\n  return data.filter(p => p !== undefined)\n}\n\n/**\n * @param {*} data\n * @return {boolean}\n */\nconst isTypeSupported = data => {\n  if (data === null) {\n    return true\n  }\n\n  const type = typeof data\n  const isSupported =\n    type === `number` ||\n    type === `string` ||\n    type === `boolean` ||\n    data instanceof Date\n\n  return isSupported\n}\n\nmodule.exports = sanitizeNode\n"],"file":"sanitize-node.js"}