{"version":3,"sources":["../../../src/schema/infer/index.js"],"names":["report","require","ObjectTypeComposer","getExampleValue","addNodeInterface","getNodeInterface","addInferredFields","addInferredTypes","schemaComposer","nodeStore","typeConflictReporter","typeMapping","parentSpan","typeNames","putFileFirst","getTypes","noNodeInterfaceTypes","typesToInfer","forEach","typeName","typeComposer","has","getOTC","runInfer","hasExtension","getExtension","hasInterface","push","create","setExtension","length","warn","panic","map","addInferredType","getTypeName","nodes","getNodesByType","internal","owner","exampleValue","ignoreFields","getFieldNames","index","indexOf","slice","module","exports"],"mappings":"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","sourcesContent":["const report = require(`gatsby-cli/lib/reporter`)\nconst { ObjectTypeComposer } = require(`graphql-compose`)\nconst { getExampleValue } = require(`./example-value`)\nconst {\n  addNodeInterface,\n  getNodeInterface,\n} = require(`../types/node-interface`)\nconst { addInferredFields } = require(`./add-inferred-fields`)\n\nconst addInferredTypes = ({\n  schemaComposer,\n  nodeStore,\n  typeConflictReporter,\n  typeMapping,\n  parentSpan,\n}) => {\n  // XXX(freiksenet): Won't be needed after plugins set typedefs\n  // Infer File first so all the links to it would work\n  const typeNames = putFileFirst(nodeStore.getTypes())\n  const noNodeInterfaceTypes = []\n\n  const typesToInfer = []\n\n  typeNames.forEach(typeName => {\n    let typeComposer\n    if (schemaComposer.has(typeName)) {\n      typeComposer = schemaComposer.getOTC(typeName)\n      // Infer if we have enabled \"@infer\" or if it's \"@dontInfer\" but we\n      // have \"addDefaultResolvers: true\"\n      const runInfer = typeComposer.hasExtension(`infer`)\n        ? typeComposer.getExtension(`infer`) ||\n          typeComposer.getExtension(`addDefaultResolvers`)\n        : true\n      if (runInfer) {\n        if (!typeComposer.hasInterface(`Node`)) {\n          noNodeInterfaceTypes.push(typeName)\n        }\n        typesToInfer.push(typeComposer)\n      }\n    } else {\n      typeComposer = ObjectTypeComposer.create(typeName, schemaComposer)\n      addNodeInterface({ schemaComposer, typeComposer })\n      typeComposer.setExtension(`createdFrom`, `inference`)\n      typesToInfer.push(typeComposer)\n    }\n  })\n\n  if (noNodeInterfaceTypes.length > 0) {\n    noNodeInterfaceTypes.forEach(typeName => {\n      report.warn(\n        `Type \\`${typeName}\\` declared in \\`createTypes\\` looks like a node, ` +\n          `but doesn't implement a \\`Node\\` interface. It's likely that you should ` +\n          `add the \\`Node\\` interface to your type def:\\n\\n` +\n          `\\`type ${typeName} implements Node { ... }\\`\\n\\n` +\n          `If you know that you don't want it to be a node (which would mean no ` +\n          `root queries to retrieve it), you can explicitly disable inference ` +\n          `for it:\\n\\n` +\n          `\\`type ${typeName} @dontInfer { ... }\\``\n      )\n    })\n    report.panic(`Building schema failed`)\n  }\n\n  return typesToInfer.map(typeComposer =>\n    addInferredType({\n      schemaComposer,\n      typeComposer,\n      nodeStore,\n      typeConflictReporter,\n      typeMapping,\n      parentSpan,\n    })\n  )\n}\n\nconst addInferredType = ({\n  schemaComposer,\n  typeComposer,\n  nodeStore,\n  typeConflictReporter,\n  typeMapping,\n  parentSpan,\n}) => {\n  const typeName = typeComposer.getTypeName()\n  const nodes = nodeStore.getNodesByType(typeName)\n  // TODO: Move this to where the type is created once we can get\n  // node type owner information directly from store\n  if (typeComposer.getExtension(`createdFrom`) === `inference`) {\n    typeComposer.setExtension(`plugin`, nodes[0].internal.owner)\n  }\n\n  const exampleValue = getExampleValue({\n    nodes,\n    typeName,\n    typeConflictReporter,\n    ignoreFields: [\n      ...getNodeInterface({ schemaComposer }).getFieldNames(),\n      `$loki`,\n      `__gatsby_resolved`,\n    ],\n  })\n\n  addInferredFields({\n    schemaComposer,\n    typeComposer,\n    nodeStore,\n    exampleValue,\n    typeMapping,\n    parentSpan,\n  })\n  return typeComposer\n}\n\nconst putFileFirst = typeNames => {\n  const index = typeNames.indexOf(`File`)\n  if (index !== -1) {\n    return [`File`, ...typeNames.slice(0, index), ...typeNames.slice(index + 1)]\n  } else {\n    return typeNames\n  }\n}\n\nmodule.exports = {\n  addInferredType,\n  addInferredTypes,\n}\n"],"file":"index.js"}