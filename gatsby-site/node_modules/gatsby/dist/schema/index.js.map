{"version":3,"sources":["../../src/schema/index.js"],"names":["tracer","require","globalTracer","store","nodeStore","createSchemaComposer","buildSchema","rebuildSchemaWithSitePage","builtInFieldExtensions","TypeConflictReporter","apiRunner","module","exports","build","parentSpan","spanArgs","childOf","span","startSpan","Object","keys","forEach","name","extension","dispatch","type","payload","traceId","schemaCustomization","thirdPartySchemas","types","fieldExtensions","printConfig","config","mapping","typeMapping","getState","typeConflictReporter","sortedTypes","sort","plugin","schemaComposer","schema","printConflicts","finish","rebuildWithSitePage","composer"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst tracer = require(`opentracing`).globalTracer()\nconst { store } = require(`../redux`)\nconst nodeStore = require(`../db/nodes`)\nconst { createSchemaComposer } = require(`./schema-composer`)\nconst { buildSchema, rebuildSchemaWithSitePage } = require(`./schema`)\nconst { builtInFieldExtensions } = require(`./extensions`)\nconst { TypeConflictReporter } = require(`./infer/type-conflict-reporter`)\nconst apiRunner = require(`../utils/api-runner-node`)\n\nmodule.exports.build = async ({ parentSpan }) => {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(`build schema`, spanArgs)\n\n  Object.keys(builtInFieldExtensions).forEach(name => {\n    const extension = builtInFieldExtensions[name]\n    store.dispatch({\n      type: `CREATE_FIELD_EXTENSION`,\n      payload: { name, extension },\n    })\n  })\n\n  await apiRunner(`createSchemaCustomization`, {\n    parentSpan,\n    traceId: `initial-createSchemaCustomization`,\n  })\n\n  const {\n    schemaCustomization: {\n      thirdPartySchemas,\n      types,\n      fieldExtensions,\n      printConfig,\n    },\n    config: { mapping: typeMapping },\n  } = store.getState()\n\n  const typeConflictReporter = new TypeConflictReporter()\n\n  // Ensure that user-defined types are processed last\n  const sortedTypes = types.sort(\n    type => type.plugin && type.plugin.name === `default-site-plugin`\n  )\n\n  const schemaComposer = createSchemaComposer({ fieldExtensions })\n  const schema = await buildSchema({\n    schemaComposer,\n    nodeStore,\n    types: sortedTypes,\n    fieldExtensions,\n    thirdPartySchemas,\n    typeMapping,\n    printConfig,\n    typeConflictReporter,\n    parentSpan,\n  })\n\n  typeConflictReporter.printConflicts()\n\n  store.dispatch({\n    type: `SET_SCHEMA_COMPOSER`,\n    payload: schemaComposer,\n  })\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n\n  span.finish()\n}\n\nmodule.exports.rebuildWithSitePage = async ({ parentSpan }) => {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(\n    `rebuild schema with SitePage context`,\n    spanArgs\n  )\n\n  const {\n    schemaCustomization: { composer: schemaComposer, fieldExtensions },\n    config: { mapping: typeMapping },\n  } = store.getState()\n\n  const typeConflictReporter = new TypeConflictReporter()\n\n  const schema = await rebuildSchemaWithSitePage({\n    schemaComposer,\n    nodeStore,\n    fieldExtensions,\n    typeMapping,\n    typeConflictReporter,\n    parentSpan,\n  })\n\n  typeConflictReporter.printConflicts()\n\n  store.dispatch({\n    type: `SET_SCHEMA_COMPOSER`,\n    payload: schemaComposer,\n  })\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n\n  span.finish()\n}\n"],"file":"index.js"}