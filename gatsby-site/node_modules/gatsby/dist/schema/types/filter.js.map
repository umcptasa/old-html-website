{"version":3,"sources":["../../../src/schema/types/filter.js"],"names":["getNamedType","getNullableType","GraphQLInputObjectType","GraphQLEnumType","GraphQLList","isSpecifiedScalarType","require","InputTypeComposer","GraphQLJSON","GraphQLDate","SEARCHABLE_ENUM","SEARCHABLE","NOT_SEARCHABLE","DEPRECATED_SEARCHABLE","convert","schemaComposer","typeComposer","inputTypeComposer","filterInputComposer","deprecationReason","inputTypeName","getTypeName","replace","convertedITC","has","getITC","name","fields","addAsComposer","fieldNames","getFieldNames","convertedFields","forEach","fieldName","fieldConfig","getFieldConfig","type","searchable","getFieldExtension","getAnyTC","itc","operatorsInputTC","isListType","getQueryOperatorListInput","operatorFields","getQueryOperatorInput","addFields","removeEmptyFields","cache","Set","add","getFields","nonEmptyFields","Object","keys","fieldITC","length","setFields","getFilterInput","typeName","getOrCreateITC","getInputTypeComposer","hasField","getFieldType","extendField","filterInputTC","module","exports","EQ","NE","GT","GTE","LT","LTE","IN","NIN","REGEX","GLOB","ALLOWED_OPERATORS","Boolean","Date","Float","ID","Int","JSON","String","Enum","CustomScalar","ARRAY_OPERATORS","getOperatorFields","fieldType","operators","result","op","includes","isBuiltInScalarType","elemMatch"],"mappings":"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","sourcesContent":["const {\n  getNamedType,\n  getNullableType,\n  GraphQLInputObjectType,\n  GraphQLEnumType,\n  GraphQLList,\n  isSpecifiedScalarType,\n} = require(`graphql`)\nconst { InputTypeComposer } = require(`graphql-compose`)\nconst { GraphQLJSON } = require(`graphql-compose`)\nconst { GraphQLDate } = require(`./date`)\n\nconst SEARCHABLE_ENUM = {\n  SEARCHABLE: `SEARCHABLE`,\n  NOT_SEARCHABLE: `NON_SEARCHABLE`,\n  DEPRECATED_SEARCHABLE: `DERPECATED_SEARCHABLE`,\n}\n\nconst convert = ({\n  schemaComposer,\n  typeComposer,\n  inputTypeComposer,\n  filterInputComposer,\n  deprecationReason,\n}) => {\n  const inputTypeName = inputTypeComposer\n    .getTypeName()\n    .replace(/Input$/, `FilterInput`)\n\n  let convertedITC\n  if (filterInputComposer) {\n    convertedITC = filterInputComposer\n  } else if (schemaComposer.has(inputTypeName)) {\n    return schemaComposer.getITC(inputTypeName)\n  } else {\n    convertedITC = new InputTypeComposer(\n      new GraphQLInputObjectType({\n        name: inputTypeName,\n        fields: {},\n      }),\n      schemaComposer\n    )\n  }\n\n  schemaComposer.addAsComposer(convertedITC)\n\n  const fieldNames = inputTypeComposer.getFieldNames()\n  const convertedFields = {}\n  fieldNames.forEach(fieldName => {\n    const fieldConfig = inputTypeComposer.getFieldConfig(fieldName)\n    const type = getNamedType(fieldConfig.type)\n    const searchable = typeComposer.getFieldExtension(fieldName, `searchable`)\n\n    if (searchable === SEARCHABLE_ENUM.NOT_SEARCHABLE) {\n      return\n    } else if (searchable === SEARCHABLE_ENUM.DEPRECATED_SEARCHABLE) {\n      deprecationReason = `Filtering on fields that need arguments to resolve is deprecated.`\n    }\n\n    if (type instanceof GraphQLInputObjectType) {\n      // Input type composers has names `FooInput`, get the type associated\n      // with it\n      const typeComposer = schemaComposer.getAnyTC(\n        type.name.replace(/Input$/, ``)\n      )\n      const itc = new InputTypeComposer(type, schemaComposer)\n\n      const operatorsInputTC = convert({\n        schemaComposer,\n        typeComposer,\n        inputTypeComposer: itc,\n        deprecationReason,\n      })\n\n      // TODO: array of arrays?\n      const isListType =\n        getNullableType(fieldConfig.type) instanceof GraphQLList\n\n      // elemMatch operator\n      convertedFields[fieldName] = isListType\n        ? getQueryOperatorListInput({\n            schemaComposer,\n            inputTypeComposer: operatorsInputTC,\n          })\n        : operatorsInputTC\n    } else {\n      // GraphQLScalarType || GraphQLEnumType\n      const operatorFields = getQueryOperatorInput({ schemaComposer, type })\n      if (operatorFields) {\n        convertedFields[fieldName] = operatorFields\n      }\n    }\n\n    if (convertedFields[fieldName]) {\n      convertedFields[fieldName].deprecationReason = deprecationReason\n    }\n  })\n\n  convertedITC.addFields(convertedFields)\n  return convertedITC\n}\n\nconst removeEmptyFields = (\n  { schemaComposer, inputTypeComposer },\n  cache = new Set()\n) => {\n  const convert = itc => {\n    if (cache.has(itc)) {\n      return itc\n    }\n    cache.add(itc)\n    const fields = itc.getFields()\n    const nonEmptyFields = {}\n    Object.keys(fields).forEach(fieldName => {\n      const fieldITC = fields[fieldName]\n      if (fieldITC instanceof InputTypeComposer) {\n        const convertedITC = convert(fieldITC)\n        if (convertedITC.getFieldNames().length) {\n          nonEmptyFields[fieldName] = convertedITC\n        }\n      } else {\n        nonEmptyFields[fieldName] = fieldITC\n      }\n    })\n    itc.setFields(nonEmptyFields)\n    return itc\n  }\n  return convert(inputTypeComposer)\n}\n\nconst getFilterInput = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName()\n  const filterInputComposer = schemaComposer.getOrCreateITC(\n    `${typeName}FilterInput`\n  )\n  const inputTypeComposer = typeComposer.getInputTypeComposer()\n\n  // TODO: In Gatsby v2, the NodeInput.id field is of type String, not ID.\n  // Remove this workaround for v3.\n  if (\n    inputTypeComposer.hasField(`id`) &&\n    getNamedType(inputTypeComposer.getFieldType(`id`)).name === `ID`\n  ) {\n    inputTypeComposer.extendField(`id`, { type: `String` })\n  }\n\n  const filterInputTC = convert({\n    schemaComposer,\n    typeComposer,\n    inputTypeComposer,\n    filterInputComposer,\n  })\n\n  return removeEmptyFields({ schemaComposer, inputTypeComposer: filterInputTC })\n}\n\nmodule.exports = { getFilterInput, SEARCHABLE_ENUM }\n\nconst EQ = `eq`\nconst NE = `ne`\nconst GT = `gt`\nconst GTE = `gte`\nconst LT = `lt`\nconst LTE = `lte`\nconst IN = `in`\nconst NIN = `nin`\nconst REGEX = `regex`\nconst GLOB = `glob`\n\nconst ALLOWED_OPERATORS = {\n  Boolean: [EQ, NE, IN, NIN],\n  Date: [EQ, NE, GT, GTE, LT, LTE, IN, NIN],\n  Float: [EQ, NE, GT, GTE, LT, LTE, IN, NIN],\n  ID: [EQ, NE, IN, NIN],\n  Int: [EQ, NE, GT, GTE, LT, LTE, IN, NIN],\n  JSON: [EQ, NE, IN, NIN, REGEX, GLOB],\n  String: [EQ, NE, IN, NIN, REGEX, GLOB],\n  Enum: [EQ, NE, IN, NIN],\n  CustomScalar: [EQ, NE, IN, NIN],\n}\n\nconst ARRAY_OPERATORS = [IN, NIN]\n\nconst getOperatorFields = (fieldType, operators) => {\n  const result = {}\n  operators.forEach(op => {\n    if (ARRAY_OPERATORS.includes(op)) {\n      result[op] = [fieldType]\n    } else {\n      result[op] = fieldType\n    }\n  })\n  return result\n}\n\nconst getQueryOperatorInput = ({ schemaComposer, type }) => {\n  let typeName\n  if (type instanceof GraphQLEnumType) {\n    typeName = `Enum`\n  } else if (isBuiltInScalarType(type)) {\n    typeName = type.name\n  } else {\n    typeName = `CustomScalar`\n  }\n  const operators = ALLOWED_OPERATORS[typeName]\n  return schemaComposer.getOrCreateITC(type.name + `QueryOperatorInput`, itc =>\n    itc.addFields(getOperatorFields(type, operators))\n  )\n}\n\nconst getQueryOperatorListInput = ({ schemaComposer, inputTypeComposer }) => {\n  const typeName = inputTypeComposer.getTypeName().replace(/Input/, `ListInput`)\n  return schemaComposer.getOrCreateITC(typeName, itc => {\n    itc.addFields({\n      elemMatch: inputTypeComposer,\n    })\n  })\n}\n\nconst isBuiltInScalarType = type =>\n  isSpecifiedScalarType(type) || type === GraphQLDate || type === GraphQLJSON\n"],"file":"filter.js"}