{"version":3,"sources":["../../../src/bootstrap/load-themes/index.js"],"names":["path","require","mergeGatsbyConfig","Promise","_","debug","preferDefault","getConfigFile","resolveTheme","themeSpec","themeName","resolve","themeDir","dirname","e","theme","themeConfig","isFunction","options","processTheme","useLegacyThemes","themesList","__experimentalThemes","plugins","mapSeries","spec","themeObj","then","arr","concat","module","exports","config","themesA","flattenDeep","reduce","newConfig","themes"],"mappings":";;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAE,MAAF,CAApB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAE,iCAAF,CAAjC;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAE,UAAF,CAAvB;;AACA,MAAMG,CAAC,GAAGH,OAAO,CAAE,QAAF,CAAjB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAE,OAAF,CAAP,CAAkB,oBAAlB,CAAd;;AACA,MAAMK,aAAa,GAAGL,OAAO,CAAE,mBAAF,CAA7B;;AACA,MAAMM,aAAa,GAAGN,OAAO,CAAE,oBAAF,CAA7B,C,CAEA;;;AACA,MAAMO,YAAY,GAAG,MAAMC,SAAN,IAAmB;AACtC,QAAMC,SAAS,GAAGD,SAAS,CAACE,OAAV,IAAqBF,SAAvC;AACA,MAAIG,QAAJ;;AACA,MAAI;AACFA,IAAAA,QAAQ,GAAGZ,IAAI,CAACa,OAAL,CAAaZ,OAAO,CAACU,OAAR,CAAgBD,SAAhB,CAAb,CAAX;AACD,GAFD,CAEE,OAAOI,CAAP,EAAU;AACV;AACA;AACA,WAAO;AAAEJ,MAAAA,SAAF;AAAaD,MAAAA;AAAb,KAAP;AACD;;AACD,QAAMM,KAAK,GAAG,MAAMT,aAAa,CAACC,aAAa,CAACK,QAAD,EAAY,eAAZ,CAAd,CAAjC,CAVsC,CAWtC;;AACA,MAAII,WAAW,GAAGD,KAAlB;;AACA,MAAIX,CAAC,CAACa,UAAF,CAAaF,KAAb,CAAJ,EAAyB;AACvBC,IAAAA,WAAW,GAAGD,KAAK,CAACN,SAAS,CAACS,OAAV,IAAqB,EAAtB,CAAnB;AACD;;AACD,SAAO;AAAER,IAAAA,SAAF;AAAaM,IAAAA,WAAb;AAA0BP,IAAAA,SAA1B;AAAqCG,IAAAA;AAArC,GAAP;AACD,CAjBD,C,CAmBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMO,YAAY,GAAG,CACnB;AAAET,EAAAA,SAAF;AAAaM,EAAAA,WAAb;AAA0BP,EAAAA,SAA1B;AAAqCG,EAAAA;AAArC,CADmB,EAEnB;AAAEQ,EAAAA;AAAF,CAFmB,KAGhB;AACH,QAAMC,UAAU,GAAGD,eAAe,GAC9BJ,WAAW,IAAIA,WAAW,CAACM,oBADG,GAE9BN,WAAW,IAAIA,WAAW,CAACO,OAF/B,CADG,CAIH;AACA;AACA;;AACA,MAAIP,WAAW,IAAIK,UAAnB,EAA+B;AAC7B;AACA;AACA,WAAOlB,OAAO,CAACqB,SAAR,CAAkBH,UAAlB,EAA8B,MAAMI,IAAN,IAAc;AACjD,YAAMC,QAAQ,GAAG,MAAMlB,YAAY,CAACiB,IAAD,CAAnC;AACA,aAAON,YAAY,CAACO,QAAD,EAAW;AAAEN,QAAAA;AAAF,OAAX,CAAnB;AACD,KAHM,EAGJO,IAHI,CAGCC,GAAG,IACTA,GAAG,CAACC,MAAJ,CAAW,CAAC;AAAEnB,MAAAA,SAAF;AAAaM,MAAAA,WAAb;AAA0BP,MAAAA,SAA1B;AAAqCG,MAAAA;AAArC,KAAD,CAAX,CAJK,CAAP;AAMD,GATD,MASO;AACL;AACA,WAAO,CAAC;AAAEF,MAAAA,SAAF;AAAaM,MAAAA,WAAb;AAA0BP,MAAAA,SAA1B;AAAqCG,MAAAA;AAArC,KAAD,CAAP;AACD;AACF,CAvBD;;AAyBAkB,MAAM,CAACC,OAAP,GAAiB,OAAOC,MAAP,EAAe;AAAEZ,EAAAA,eAAe,GAAG;AAApB,CAAf,KAA+C;AAC9D,QAAMa,OAAO,GAAG,MAAM9B,OAAO,CAACqB,SAAR,CACpBJ,eAAe,GAAGY,MAAM,CAACV,oBAAP,IAA+B,EAAlC,GAAuCU,MAAM,CAACT,OAAP,IAAkB,EADpD,EAEpB,MAAMd,SAAN,IAAmB;AACjB,UAAMiB,QAAQ,GAAG,MAAMlB,YAAY,CAACC,SAAD,CAAnC;AACA,WAAOU,YAAY,CAACO,QAAD,EAAW;AAAEN,MAAAA;AAAF,KAAX,CAAnB;AACD,GALmB,EAMpBO,IANoB,CAMfC,GAAG,IAAIxB,CAAC,CAAC8B,WAAF,CAAcN,GAAd,CANQ,CAAtB,CAD8D,CAS9D;;AACAvB,EAAAA,KAAK,CAAC4B,OAAD,CAAL,CAV8D,CAY9D;AACA;AACA;;AACA,SACE9B,OAAO,CAACqB,SAAR,CAAkBS,OAAlB,EAA2B,CAAC;AAAEvB,IAAAA,SAAF;AAAaM,IAAAA,WAAW,GAAG,EAA3B;AAA+BP,IAAAA;AAA/B,GAAD,KAAgD;AACzE,6BACKO,WADL;AAEEO,MAAAA,OAAO,EAAE,CACP,IAAIP,WAAW,CAACO,OAAZ,IAAuB,EAA3B,CADO,EAEP;AACA;AAAEZ,QAAAA,OAAO,EAAED,SAAX;AAAsBQ,QAAAA,OAAO,EAAET,SAAS,CAACS,OAAV,IAAqB;AAApD,OAHO;AAFX;AAQD,GATD;AAUE;;;;;;AAVF,GAgBGiB,MAhBH,CAgBUjC,iBAhBV,EAgB6B,EAhB7B,EAiBGyB,IAjBH,CAiBQS,SAAS,IAAI;AACjB,WAAO;AACLJ,MAAAA,MAAM,EAAE9B,iBAAiB,CAACkC,SAAD,EAAYJ,MAAZ,CADpB;AAELK,MAAAA,MAAM,EAAEJ;AAFH,KAAP;AAID,GAtBH,CADF;AAyBD,CAxCD","sourcesContent":["const path = require(`path`)\nconst mergeGatsbyConfig = require(`../../utils/merge-gatsby-config`)\nconst Promise = require(`bluebird`)\nconst _ = require(`lodash`)\nconst debug = require(`debug`)(`gatsby:load-themes`)\nconst preferDefault = require(`../prefer-default`)\nconst getConfigFile = require(`../get-config-file`)\n\n// get the gatsby-config file for a theme\nconst resolveTheme = async themeSpec => {\n  const themeName = themeSpec.resolve || themeSpec\n  let themeDir\n  try {\n    themeDir = path.dirname(require.resolve(themeName))\n  } catch (e) {\n    // this can be local plugin, and require.resolve will throw\n    // in this case - let's return partial entry\n    return { themeName, themeSpec }\n  }\n  const theme = await preferDefault(getConfigFile(themeDir, `gatsby-config`))\n  // if theme is a function, call it with the themeConfig\n  let themeConfig = theme\n  if (_.isFunction(theme)) {\n    themeConfig = theme(themeSpec.options || {})\n  }\n  return { themeName, themeConfig, themeSpec, themeDir }\n}\n\n// single iteration of a recursive function that resolve parent themes\n// It's recursive because we support child themes declaring parents and\n// have to resolve all the way `up the tree` of parent/children relationships\n//\n// Theoretically, there could be an infinite loop here but in practice there is\n// no use case for a loop so I expect that to only happen if someone is very\n// off track and creating their own set of themes\nconst processTheme = (\n  { themeName, themeConfig, themeSpec, themeDir },\n  { useLegacyThemes }\n) => {\n  const themesList = useLegacyThemes\n    ? themeConfig && themeConfig.__experimentalThemes\n    : themeConfig && themeConfig.plugins\n  // gatsby themes don't have to specify a gatsby-config.js (they might only use gatsby-node, etc)\n  // in this case they're technically plugins, but we should support it anyway\n  // because we can't guarantee which files theme creators create first\n  if (themeConfig && themesList) {\n    // for every parent theme a theme defines, resolve the parent's\n    // gatsby config and return it in order [parentA, parentB, child]\n    return Promise.mapSeries(themesList, async spec => {\n      const themeObj = await resolveTheme(spec)\n      return processTheme(themeObj, { useLegacyThemes })\n    }).then(arr =>\n      arr.concat([{ themeName, themeConfig, themeSpec, themeDir }])\n    )\n  } else {\n    // if a theme doesn't define additional themes, return the original theme\n    return [{ themeName, themeConfig, themeSpec, themeDir }]\n  }\n}\n\nmodule.exports = async (config, { useLegacyThemes = false }) => {\n  const themesA = await Promise.mapSeries(\n    useLegacyThemes ? config.__experimentalThemes || [] : config.plugins || [],\n    async themeSpec => {\n      const themeObj = await resolveTheme(themeSpec)\n      return processTheme(themeObj, { useLegacyThemes })\n    }\n  ).then(arr => _.flattenDeep(arr))\n\n  // log out flattened themes list to aid in debugging\n  debug(themesA)\n\n  // map over each theme, adding the theme itself to the plugins\n  // list in the config for the theme. This enables the usage of\n  // gatsby-node, etc in themes.\n  return (\n    Promise.mapSeries(themesA, ({ themeName, themeConfig = {}, themeSpec }) => {\n      return {\n        ...themeConfig,\n        plugins: [\n          ...(themeConfig.plugins || []),\n          // theme plugin is last so it's gatsby-node, etc can override it's declared plugins, like a normal site.\n          { resolve: themeName, options: themeSpec.options || {} },\n        ],\n      }\n    })\n      /**\n       * themes resolve to a gatsby-config, so here we merge all of the configs\n       * into a single config, making sure to maintain the order in which\n       * they were defined so that later configs, like the user's site and\n       * children, can override functionality in earlier themes.\n       */\n      .reduce(mergeGatsbyConfig, {})\n      .then(newConfig => {\n        return {\n          config: mergeGatsbyConfig(newConfig, config),\n          themes: themesA,\n        }\n      })\n  )\n}\n"],"file":"index.js"}