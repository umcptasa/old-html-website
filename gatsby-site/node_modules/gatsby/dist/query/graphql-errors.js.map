{"version":3,"sources":["../../src/query/graphql-errors.js"],"names":["handlers","name","node","kind","value","loc","formatFilePath","filePath","report","format","bold","blue","formatError","message","codeFrame","stripIndent","extractError","error","docRegex","matches","docName","codeBlock","exec","toString","index","lastIndex","trim","findLocation","extractedMessage","def","location","enter","regex","handler","match","slice","getCodeFrame","query","line","column","start","linesAbove","linesBelow","getCodeFrameFromRelayError","source","body","multipleRootQueriesError","otherDef","otherName","unifiedName","_","camelCase","upperFirst","yellow","Number","MAX_SAFE_INTEGER","green","graphqlValidationError","errors","doc","length","locations","graphqlError","namePathMap","nameDefMap","get","formattedMessage","reportedMessage"],"mappings":"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","sourcesContent":["// @flow\n\nimport { print, visit, GraphQLError, getLocation } from \"graphql\"\nimport { codeFrameColumns } from \"@babel/code-frame\"\nimport _ from \"lodash\"\nimport report from \"gatsby-cli/lib/reporter\"\n\ntype RelayGraphQLError = Error & { validationErrors?: Object }\n\n// These handle specific errors throw by RelayParser. If an error matches\n// you get a pointer to the location in the query that is broken, otherwise\n// we show the error and the query.\nconst handlers = [\n  [\n    /Unknown field `(.+)` on type `(.+)`/i,\n    ([name], node) => {\n      if (node.kind === `Field` && node.name.value === name) {\n        return node.name.loc\n      }\n      return null\n    },\n  ],\n  [\n    /Unknown argument `(.+)`/i,\n    ([name], node) => {\n      if (node.kind === `Argument` && node.name.value === name) {\n        return node.name.loc\n      }\n      return null\n    },\n  ],\n  [\n    /Unknown directive `@(.+)`/i,\n    ([name], node) => {\n      if (node.kind === `Directive` && node.name.value === name) {\n        return node.name.loc\n      }\n      return null\n    },\n  ],\n]\n\nfunction formatFilePath(filePath: string) {\n  return `${report.format.bold(`file:`)} ${report.format.blue(filePath)}`\n}\n\nfunction formatError(message: string, filePath: string, codeFrame: string) {\n  return (\n    report.stripIndent`\n    ${message}\n\n      ${formatFilePath(filePath)}\n  ` + `\\n\\n${codeFrame}\\n`\n  )\n}\n\nfunction extractError(error: Error): { message: string, docName: string } {\n  const docRegex = /Error:.(RelayParser|GraphQLParser):(.*)Source: document.`(.*)`.file.*(GraphQL.request.*^\\s*$)/gms\n  let matches\n  let message = ``\n  let docName = ``\n  let codeBlock = ``\n  while ((matches = docRegex.exec(error.toString())) !== null) {\n    // This is necessary to avoid infinite loops with zero-width matches\n    if (matches.index === docRegex.lastIndex) docRegex.lastIndex++\n    ;[, , message, docName, codeBlock] = matches\n  }\n\n  if (!message) {\n    message = error.toString()\n  }\n\n  message = message.trim()\n\n  return { message, codeBlock, docName }\n}\n\nfunction findLocation(extractedMessage, def) {\n  let location = null\n  visit(def, {\n    enter(node) {\n      if (location) return\n      for (let [regex, handler] of handlers) {\n        let match = extractedMessage.match(regex)\n        if (!match) continue\n        if ((location = handler(match.slice(1), node))) break\n      }\n    },\n  })\n  return location\n}\n\nfunction getCodeFrame(query: string, line?: number, column?: number) {\n  return codeFrameColumns(\n    query,\n    {\n      start: {\n        line,\n        column,\n      },\n    },\n    {\n      linesAbove: 10,\n      linesBelow: 10,\n    }\n  )\n}\n\nfunction getCodeFrameFromRelayError(\n  def: any,\n  extractedMessage: string,\n  error: Error\n) {\n  let { start, source } = findLocation(extractedMessage, def) || {}\n  let query = source ? source.body : print(def)\n\n  // we can't reliably get a location without the location source, since\n  // the printed query may differ from the original.\n  let { line, column } = (source && getLocation(source, start)) || {}\n  return getCodeFrame(query, line, column)\n}\n\nexport function multipleRootQueriesError(\n  filePath: string,\n  def: any,\n  otherDef: any\n) {\n  let name = def.name.value\n  let otherName = otherDef.name.value\n  let unifiedName = `${_.camelCase(name)}And${_.upperFirst(\n    _.camelCase(otherName)\n  )}`\n\n  return formatError(\n    `Multiple \"root\" queries found in file: \"${name}\" and \"${otherName}\". ` +\n      `Only the first (\"${otherName}\") will be registered.`,\n    filePath,\n    `  ${report.format.yellow(`Instead of:`)} \\n\\n` +\n      codeFrameColumns(\n        report.stripIndent`\n        query ${otherName} {\n          bar {\n            #...\n          }\n        }\n\n        query ${name} {\n          foo {\n            #...\n          }\n        }\n      `,\n        {\n          start: {\n            column: 0,\n            line: 0,\n          },\n        },\n        {\n          linesBelow: Number.MAX_SAFE_INTEGER,\n        }\n      ) +\n      `\\n\\n  ${report.format.green(`Do:`)} \\n\\n` +\n      codeFrameColumns(\n        report.stripIndent`\n        query ${unifiedName} {\n          bar {\n            #...\n          }\n          foo {\n            #...\n          }\n        }\n      `,\n        {\n          start: {\n            column: 0,\n            line: 0,\n          },\n        },\n        {\n          linesBelow: Number.MAX_SAFE_INTEGER,\n        }\n      )\n  )\n}\n\nexport function graphqlValidationError(\n  errors: Array<GraphQLError>,\n  filePath: string,\n  doc: any\n): string {\n  if (!errors || !errors.length) return ``\n  let error = errors[0]\n  let { source, locations: [{ line, column }] = [{}] } = error\n  let query = source ? source.body : print(doc)\n\n  return formatError(error.message, filePath, getCodeFrame(query, line, column))\n}\n\nexport function graphqlError(\n  namePathMap: Map<string, string>,\n  nameDefMap: Map<string, any>,\n  error: Error | RelayGraphQLError\n) {\n  let codeBlock\n  let { message, docName } = extractError(error)\n  let filePath = namePathMap.get(docName)\n\n  if (filePath && docName) {\n    codeBlock = getCodeFrameFromRelayError(\n      nameDefMap.get(docName),\n      message,\n      error\n    )\n    const formattedMessage = formatError(message, filePath, codeBlock)\n    return { formattedMessage, docName, message, codeBlock }\n  }\n\n  let reportedMessage = `There was an error while compiling your site's GraphQL queries.\n  ${message || error.message}\n    `\n\n  if (error.message.match(/must be an instance of/)) {\n    reportedMessage +=\n      `This usually means that more than one instance of 'graphql' is installed ` +\n      `in your node_modules. Remove all but the top level one or run \\`npm dedupe\\` to fix it.`\n  }\n\n  if (error.message.match(/Duplicate document/)) {\n    reportedMessage += `${error.message.slice(21)}\\n`\n  }\n\n  return { formattedMessage: reportedMessage, docName, message, codeBlock }\n}\n"],"file":"graphql-errors.js"}